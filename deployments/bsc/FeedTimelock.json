{
  "address": "0x0d12B588E09fF802bb30E895E78Cd8f230067898",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "beneficiary_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "releaseInterval_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "releaseAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLockAmount_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldBeneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newBeneficiary",
          "type": "address"
        }
      ],
      "name": "NewBeneficiary",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldReleaseAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReleaseAmount",
          "type": "uint256"
        }
      ],
      "name": "NewReleaseAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldReleaseInterval",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReleaseInterval",
          "type": "uint256"
        }
      ],
      "name": "NewReleaseInterval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newToken",
          "type": "address"
        }
      ],
      "name": "NewToken",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "beneficiary",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "releaseInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newBeneficiary",
          "type": "address"
        }
      ],
      "name": "setBeneficiary",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newReleaseAmount",
          "type": "uint256"
        }
      ],
      "name": "setReleaseAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newReleaseInterval",
          "type": "uint256"
        }
      ],
      "name": "setReleaseInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "newToken",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelockBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3fb0a49579484df87f0b8f2219af3b62a8151e085d9e001498ccd34d5a02a186",
  "receipt": {
    "to": null,
    "from": "0x4e6b4569a3f191EE878235D263856A3CDc9536aA",
    "contractAddress": "0x0d12B588E09fF802bb30E895E78Cd8f230067898",
    "transactionIndex": 195,
    "gasUsed": "1032415",
    "logsBloom": "0x
    "blockHash": "0xb287c15a80e0a578d8d1598423bef7290745ac4ee7a9438389a031f4a376f102",
    "transactionHash": "0x3fb0a49579484df87f0b8f2219af3b62a8151e085d9e001498ccd34d5a02a186",
    "logs": [],
    "blockNumber": 6809480,
    "cumulativeGasUsed": "20698503",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x67d66e8Ec1Fd25d98B3Ccd3B19B7dc4b4b7fC493",
    "0x565dE6CB7e5C27fd677CD027fef6e50F82cb197a",
    "806400",
    "1671875000000000000000000",
    "26750000000000000000000000"
  ],
  "solcInputHash": "bb725bce1cc77098e6c99354c290e58e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"beneficiary_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"releaseInterval_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLockAmount_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"NewBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReleaseAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReleaseAmount\",\"type\":\"uint256\"}],\"name\":\"NewReleaseAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReleaseInterval\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReleaseInterval\",\"type\":\"uint256\"}],\"name\":\"NewReleaseInterval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"NewToken\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"beneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"releaseInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBeneficiary\",\"type\":\"address\"}],\"name\":\"setBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReleaseAmount\",\"type\":\"uint256\"}],\"name\":\"setReleaseAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReleaseInterval\",\"type\":\"uint256\"}],\"name\":\"setReleaseInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"newToken\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelockBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"NewBeneficiary(address,address)\":{\"notice\":\"Emitted when beneficiary is changed.\"},\"NewReleaseAmount(uint256,uint256)\":{\"notice\":\"Emitted when release amount is changed\"},\"NewReleaseInterval(uint256,uint256)\":{\"notice\":\"Emitted when release interval is changed\"},\"NewToken(address,address)\":{\"notice\":\"Emitted when token is changed.\"}},\"kind\":\"user\",\"methods\":{\"deposit(uint256)\":{\"notice\":\"Main Actions ///\"},\"setAdmin(address)\":{\"notice\":\"ADMIN FUNCTIONS ///\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/timelock/FeedTimelock.sol\":\"FeedTimelock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/timelock/FeedTimelock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract FeedTimelock {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    // Timelock administrator.\\n    address private admin;\\n\\n    // ERC20 token that will be locked.\\n    IERC20 private _token;\\n\\n    // Beneficiary of tokens after they released.\\n    address private _beneficiary;\\n\\n    // Start block of timelock.\\n    uint256 private _startBlock;\\n\\n    // Release block interval\\n    uint256 private _releaseInterval;\\n\\n    // Release token amount\\n    uint256 private _releaseAmount;\\n\\n    // Minimum locked amount of tokens\\n    uint256 private _minLockAmount;\\n\\n    // Emitted when admin is changed.\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /// @notice Emitted when token is changed.\\n    event NewToken(address oldToken, address newToken);\\n\\n    /// @notice Emitted when beneficiary is changed.\\n    event NewBeneficiary(address oldBeneficiary, address newBeneficiary);\\n\\n    /// @notice Emitted when release interval is changed\\n    event NewReleaseInterval(uint256 oldReleaseInterval, uint256 newReleaseInterval);\\n\\n    /// @notice Emitted when release amount is changed\\n    event NewReleaseAmount(uint256 oldReleaseAmount, uint256 newReleaseAmount);\\n\\n    constructor(\\n        IERC20 token_,\\n        address beneficiary_,\\n        uint256 releaseInterval_,\\n        uint256 releaseAmount_,\\n        uint256 minLockAmount_\\n    ) public {\\n        admin = msg.sender;\\n\\n        _token = token_;\\n        _beneficiary = beneficiary_;\\n        _releaseInterval = releaseInterval_;\\n        _releaseAmount = releaseAmount_;\\n        _minLockAmount = minLockAmount_;\\n    }\\n\\n    modifier onlyAdmin {\\n        require(msg.sender == admin, \\\"Timelock: Only admin is allowed to call this function\\\");\\n        _;\\n    }\\n\\n    /// @notice Do not allow contract to accept any BNB\\n    fallback() external payable {\\n        revert(\\\"Timelock: Contract is not allowed to accept any BNB\\\");\\n    }\\n\\n    /// ADMIN FUNCTIONS ///\\n\\n    function setAdmin(address newAdmin) external onlyAdmin {\\n        address oldAdmin = admin;\\n        admin = newAdmin;\\n        emit NewAdmin(oldAdmin, newAdmin);\\n    }\\n\\n    function setToken(IERC20 newToken) external onlyAdmin {\\n        IERC20 oldToken = _token;\\n        _token = newToken;\\n        emit NewToken(address(oldToken), address(newToken));\\n    }\\n\\n    function setBeneficiary(address newBeneficiary) external onlyAdmin {\\n        address oldBeneficiary = _beneficiary;\\n        _beneficiary = newBeneficiary;\\n        emit NewBeneficiary(oldBeneficiary, newBeneficiary);\\n    }\\n\\n    function setReleaseInterval(uint256 newReleaseInterval) external onlyAdmin {\\n        uint256 oldReleaseInterval = _releaseInterval;\\n        _releaseInterval = newReleaseInterval;\\n        emit NewReleaseInterval(oldReleaseInterval, newReleaseInterval);\\n    }\\n\\n    function setReleaseAmount(uint256 newReleaseAmount) external onlyAdmin {\\n        uint256 oldReleaseAmount = _releaseAmount;\\n        _releaseAmount = newReleaseAmount;\\n        emit NewReleaseAmount(oldReleaseAmount, newReleaseAmount);\\n    }\\n\\n    /// Main Actions ///\\n    function deposit(uint256 amount) public {\\n        require(_token.balanceOf(address(this)) == 0, \\\"Timelock: Current timelock balance is not zero\\\");\\n        require(amount >= _minLockAmount, \\\"Timelock: Amount is less than required minimum locked amount\\\");\\n\\n        _startBlock = getBlockNumber();\\n        _token.safeTransferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function release() public {\\n        require(block.number >= _startBlock, \\\"Timelock: Current block is less than start block\\\");\\n        require(block.number >= _startBlock.add(_releaseInterval), \\\"Timelock: Current block is before release block\\\");\\n        uint256 amount = _token.balanceOf(address(this));\\n        require(amount > 0, \\\"Timelock: No tokens to release\\\");\\n\\n        uint256 actualAmount;\\n        if (amount >= _releaseAmount) {\\n            actualAmount = _releaseAmount;\\n        } else {\\n            actualAmount = amount;\\n        }\\n\\n        uint256 oldStartBlock = _startBlock;\\n        _startBlock = oldStartBlock.add(_releaseInterval);\\n\\n        _token.safeTransfer(_beneficiary, actualAmount);\\n    }\\n\\n    function token() public view returns (IERC20) {\\n        return _token;\\n    }\\n\\n    function timelockBalance() public view returns (uint256) {\\n        return _token.balanceOf(address(this));\\n    }\\n\\n    function beneficiary() public view returns (address) {\\n        return _beneficiary;\\n    }\\n\\n    function startBlock() public view returns (uint256) {\\n        return _startBlock;\\n    }\\n\\n    function releaseInterval() public view returns (uint256) {\\n        return _releaseInterval;\\n    }\\n\\n    function releaseBlock() public view returns (uint256) {\\n        return _startBlock.add(_releaseInterval);\\n    }\\n\\n    function releaseAmount() public view returns (uint256) {\\n        return _releaseAmount;\\n    }\\n\\n    function getBlockNumber() public view returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x637994aa53620547f542557ead8bc20786a2013526c19c354f0f0b5ab54ecca2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161100e38038061100e833981810160405260a081101561003357600080fd5b508051602082015160408301516060840151608090940151600080546001600160a01b03199081163317909155600180546001600160a01b039687169083161790556002805495909416941693909317909155600455600591909155600655610f6d806100a16000396000f3fe6080604052600436106100e85760003560e01c80634c77a10f1161008a578063b6b55f2511610059578063b6b55f25146102a5578063c062dc5f146102cf578063dffac834146102e4578063fc0c546a1461030e576100e8565b80634c77a10f1461021e5780634f2fbb9d14610233578063704b6c021461025d57806386d1a69f14610290576100e8565b806320d9145c116100c657806320d9145c146101ae57806338af3eed146101c357806342cbb15c146101f457806348cd4cb114610209576100e8565b8063144fa6d71461011f5780631c31f710146101545780631f8db26814610187575b60405162461bcd60e51b8152600401808060200182810382526033815260200180610e776033913960400191505060405180910390fd5b34801561012b57600080fd5b506101526004803603602081101561014257600080fd5b50356001600160a01b0316610323565b005b34801561016057600080fd5b506101526004803603602081101561017757600080fd5b50356001600160a01b03166103cf565b34801561019357600080fd5b5061019c61047b565b60408051918252519081900360200190f35b3480156101ba57600080fd5b5061019c610481565b3480156101cf57600080fd5b506101d86104fd565b604080516001600160a01b039092168252519081900360200190f35b34801561020057600080fd5b5061019c61050c565b34801561021557600080fd5b5061019c610510565b34801561022a57600080fd5b5061019c610516565b34801561023f57600080fd5b506101526004803603602081101561025657600080fd5b5035610534565b34801561026957600080fd5b506101526004803603602081101561028057600080fd5b50356001600160a01b03166105c4565b34801561029c57600080fd5b50610152610670565b3480156102b157600080fd5b50610152600480360360208110156102c857600080fd5b5035610816565b3480156102db57600080fd5b5061019c610930565b3480156102f057600080fd5b506101526004803603602081101561030757600080fd5b5035610936565b34801561031a57600080fd5b506101d86109c6565b6000546001600160a01b0316331461036c5760405162461bcd60e51b8152600401808060200182810382526035815260200180610eaa6035913960400191505060405180910390fd5b600180546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935281517f46960970e01c8cbebf9e58299b0acf8137b299ef06eb6c4f5be2c0443d5e5f22929181900390910190a15050565b6000546001600160a01b031633146104185760405162461bcd60e51b8152600401808060200182810382526035815260200180610eaa6035913960400191505060405180910390fd5b600280546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935281517f6b73ba97679a45fa03de9ae7002a53163e4c0c6cdcb3ae225dd5fffd555181f2929181900390910190a15050565b60045490565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156104cc57600080fd5b505afa1580156104e0573d6000803e3d6000fd5b505050506040513d60208110156104f657600080fd5b5051905090565b6002546001600160a01b031690565b4390565b60035490565b600061052f6004546003546109d590919063ffffffff16565b905090565b6000546001600160a01b0316331461057d5760405162461bcd60e51b8152600401808060200182810382526035815260200180610eaa6035913960400191505060405180910390fd5b6005805490829055604080518281526020810184905281517f8c3d9dce88851a2b1328a518f9d3920c2a5199923a9d85ee85789c93f23cdcbc929181900390910190a15050565b6000546001600160a01b0316331461060d5760405162461bcd60e51b8152600401808060200182810382526035815260200180610eaa6035913960400191505060405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935281517ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc929181900390910190a15050565b6003544310156106b15760405162461bcd60e51b8152600401808060200182810382526030815260200180610db76030913960400191505060405180910390fd5b6004546003546106c0916109d5565b4310156106fe5760405162461bcd60e51b815260040180806020018281038252602f815260200180610f09602f913960400191505060405180910390fd5b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561074957600080fd5b505afa15801561075d573d6000803e3d6000fd5b505050506040513d602081101561077357600080fd5b50519050806107c9576040805162461bcd60e51b815260206004820152601e60248201527f54696d656c6f636b3a204e6f20746f6b656e7320746f2072656c656173650000604482015290519081900360640190fd5b600060055482106107dd57506005546107e0565b50805b6003546004546107f19082906109d5565b600355600254600154610811916001600160a01b03918216911684610a36565b505050565b600154604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561086157600080fd5b505afa158015610875573d6000803e3d6000fd5b505050506040513d602081101561088b57600080fd5b5051156108c95760405162461bcd60e51b815260040180806020018281038252602e815260200180610e0d602e913960400191505060405180910390fd5b60065481101561090a5760405162461bcd60e51b815260040180806020018281038252603c815260200180610e3b603c913960400191505060405180910390fd5b61091261050c565b60035560015461092d906001600160a01b0316333084610a88565b50565b60055490565b6000546001600160a01b0316331461097f5760405162461bcd60e51b8152600401808060200182810382526035815260200180610eaa6035913960400191505060405180910390fd5b6004805490829055604080518281526020810184905281517fbffff6e05f13664dabb5dd3f161c9a6e30c27bb5436941106dd7fd93d3761900929181900390910190a15050565b6001546001600160a01b031690565b600082820183811015610a2f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610811908490610ae8565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610ae2908590610ae8565b50505050565b6060610b3d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b999092919063ffffffff16565b80519091501561081157808060200190516020811015610b5c57600080fd5b50516108115760405162461bcd60e51b815260040180806020018281038252602a815260200180610edf602a913960400191505060405180910390fd5b6060610ba88484600085610bb0565b949350505050565b606082471015610bf15760405162461bcd60e51b8152600401808060200182810382526026815260200180610de76026913960400191505060405180910390fd5b610bfa85610d0c565b610c4b576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310610c8a5780518252601f199092019160209182019101610c6b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610cec576040519150601f19603f3d011682016040523d82523d6000602084013e610cf1565b606091505b5091509150610d01828286610d12565b979650505050505050565b3b151590565b60608315610d21575081610a2f565b825115610d315782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d7b578181015183820152602001610d63565b50505050905090810190601f168015610da85780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe54696d656c6f636b3a2043757272656e7420626c6f636b206973206c657373207468616e20737461727420626c6f636b416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c54696d656c6f636b3a2043757272656e742074696d656c6f636b2062616c616e6365206973206e6f74207a65726f54696d656c6f636b3a20416d6f756e74206973206c657373207468616e207265717569726564206d696e696d756d206c6f636b656420616d6f756e7454696d656c6f636b3a20436f6e7472616374206973206e6f7420616c6c6f77656420746f2061636365707420616e7920424e4254696d656c6f636b3a204f6e6c792061646d696e20697320616c6c6f77656420746f2063616c6c20746869732066756e6374696f6e5361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656454696d656c6f636b3a2043757272656e7420626c6f636b206973206265666f72652072656c6561736520626c6f636ba264697066735822122059b97be5de339e8b36f2c7cd370828dafa5b605fe3390dbeef5b0c9313e69d0764736f6c63430007030033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c80634c77a10f1161008a578063b6b55f2511610059578063b6b55f25146102a5578063c062dc5f146102cf578063dffac834146102e4578063fc0c546a1461030e576100e8565b80634c77a10f1461021e5780634f2fbb9d14610233578063704b6c021461025d57806386d1a69f14610290576100e8565b806320d9145c116100c657806320d9145c146101ae57806338af3eed146101c357806342cbb15c146101f457806348cd4cb114610209576100e8565b8063144fa6d71461011f5780631c31f710146101545780631f8db26814610187575b60405162461bcd60e51b8152600401808060200182810382526033815260200180610e776033913960400191505060405180910390fd5b34801561012b57600080fd5b506101526004803603602081101561014257600080fd5b50356001600160a01b0316610323565b005b34801561016057600080fd5b506101526004803603602081101561017757600080fd5b50356001600160a01b03166103cf565b34801561019357600080fd5b5061019c61047b565b60408051918252519081900360200190f35b3480156101ba57600080fd5b5061019c610481565b3480156101cf57600080fd5b506101d86104fd565b604080516001600160a01b039092168252519081900360200190f35b34801561020057600080fd5b5061019c61050c565b34801561021557600080fd5b5061019c610510565b34801561022a57600080fd5b5061019c610516565b34801561023f57600080fd5b506101526004803603602081101561025657600080fd5b5035610534565b34801561026957600080fd5b506101526004803603602081101561028057600080fd5b50356001600160a01b03166105c4565b34801561029c57600080fd5b50610152610670565b3480156102b157600080fd5b50610152600480360360208110156102c857600080fd5b5035610816565b3480156102db57600080fd5b5061019c610930565b3480156102f057600080fd5b506101526004803603602081101561030757600080fd5b5035610936565b34801561031a57600080fd5b506101d86109c6565b6000546001600160a01b0316331461036c5760405162461bcd60e51b8152600401808060200182810382526035815260200180610eaa6035913960400191505060405180910390fd5b600180546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935281517f46960970e01c8cbebf9e58299b0acf8137b299ef06eb6c4f5be2c0443d5e5f22929181900390910190a15050565b6000546001600160a01b031633146104185760405162461bcd60e51b8152600401808060200182810382526035815260200180610eaa6035913960400191505060405180910390fd5b600280546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935281517f6b73ba97679a45fa03de9ae7002a53163e4c0c6cdcb3ae225dd5fffd555181f2929181900390910190a15050565b60045490565b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b1580156104cc57600080fd5b505afa1580156104e0573d6000803e3d6000fd5b505050506040513d60208110156104f657600080fd5b5051905090565b6002546001600160a01b031690565b4390565b60035490565b600061052f6004546003546109d590919063ffffffff16565b905090565b6000546001600160a01b0316331461057d5760405162461bcd60e51b8152600401808060200182810382526035815260200180610eaa6035913960400191505060405180910390fd5b6005805490829055604080518281526020810184905281517f8c3d9dce88851a2b1328a518f9d3920c2a5199923a9d85ee85789c93f23cdcbc929181900390910190a15050565b6000546001600160a01b0316331461060d5760405162461bcd60e51b8152600401808060200182810382526035815260200180610eaa6035913960400191505060405180910390fd5b600080546001600160a01b038381166001600160a01b0319831681179093556040805191909216808252602082019390935281517ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc929181900390910190a15050565b6003544310156106b15760405162461bcd60e51b8152600401808060200182810382526030815260200180610db76030913960400191505060405180910390fd5b6004546003546106c0916109d5565b4310156106fe5760405162461bcd60e51b815260040180806020018281038252602f815260200180610f09602f913960400191505060405180910390fd5b600154604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561074957600080fd5b505afa15801561075d573d6000803e3d6000fd5b505050506040513d602081101561077357600080fd5b50519050806107c9576040805162461bcd60e51b815260206004820152601e60248201527f54696d656c6f636b3a204e6f20746f6b656e7320746f2072656c656173650000604482015290519081900360640190fd5b600060055482106107dd57506005546107e0565b50805b6003546004546107f19082906109d5565b600355600254600154610811916001600160a01b03918216911684610a36565b505050565b600154604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561086157600080fd5b505afa158015610875573d6000803e3d6000fd5b505050506040513d602081101561088b57600080fd5b5051156108c95760405162461bcd60e51b815260040180806020018281038252602e815260200180610e0d602e913960400191505060405180910390fd5b60065481101561090a5760405162461bcd60e51b815260040180806020018281038252603c815260200180610e3b603c913960400191505060405180910390fd5b61091261050c565b60035560015461092d906001600160a01b0316333084610a88565b50565b60055490565b6000546001600160a01b0316331461097f5760405162461bcd60e51b8152600401808060200182810382526035815260200180610eaa6035913960400191505060405180910390fd5b6004805490829055604080518281526020810184905281517fbffff6e05f13664dabb5dd3f161c9a6e30c27bb5436941106dd7fd93d3761900929181900390910190a15050565b6001546001600160a01b031690565b600082820183811015610a2f576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610811908490610ae8565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610ae2908590610ae8565b50505050565b6060610b3d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b999092919063ffffffff16565b80519091501561081157808060200190516020811015610b5c57600080fd5b50516108115760405162461bcd60e51b815260040180806020018281038252602a815260200180610edf602a913960400191505060405180910390fd5b6060610ba88484600085610bb0565b949350505050565b606082471015610bf15760405162461bcd60e51b8152600401808060200182810382526026815260200180610de76026913960400191505060405180910390fd5b610bfa85610d0c565b610c4b576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310610c8a5780518252601f199092019160209182019101610c6b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610cec576040519150601f19603f3d011682016040523d82523d6000602084013e610cf1565b606091505b5091509150610d01828286610d12565b979650505050505050565b3b151590565b60608315610d21575081610a2f565b825115610d315782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610d7b578181015183820152602001610d63565b50505050905090810190601f168015610da85780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe54696d656c6f636b3a2043757272656e7420626c6f636b206973206c657373207468616e20737461727420626c6f636b416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c54696d656c6f636b3a2043757272656e742074696d656c6f636b2062616c616e6365206973206e6f74207a65726f54696d656c6f636b3a20416d6f756e74206973206c657373207468616e207265717569726564206d696e696d756d206c6f636b656420616d6f756e7454696d656c6f636b3a20436f6e7472616374206973206e6f7420616c6c6f77656420746f2061636365707420616e7920424e4254696d656c6f636b3a204f6e6c792061646d696e20697320616c6c6f77656420746f2063616c6c20746869732066756e6374696f6e5361666545524332303a204552433230206f7065726174696f6e20646964206e6f74207375636365656454696d656c6f636b3a2043757272656e7420626c6f636b206973206265666f72652072656c6561736520626c6f636ba264697066735822122059b97be5de339e8b36f2c7cd370828dafa5b605fe3390dbeef5b0c9313e69d0764736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewBeneficiary(address,address)": {
        "notice": "Emitted when beneficiary is changed."
      },
      "NewReleaseAmount(uint256,uint256)": {
        "notice": "Emitted when release amount is changed"
      },
      "NewReleaseInterval(uint256,uint256)": {
        "notice": "Emitted when release interval is changed"
      },
      "NewToken(address,address)": {
        "notice": "Emitted when token is changed."
      }
    },
    "kind": "user",
    "methods": {
      "deposit(uint256)": {
        "notice": "Main Actions ///"
      },
      "setAdmin(address)": {
        "notice": "ADMIN FUNCTIONS ///"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3058,
        "contract": "contracts/timelock/FeedTimelock.sol:FeedTimelock",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3060,
        "contract": "contracts/timelock/FeedTimelock.sol:FeedTimelock",
        "label": "_token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1124"
      },
      {
        "astId": 3062,
        "contract": "contracts/timelock/FeedTimelock.sol:FeedTimelock",
        "label": "_beneficiary",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 3064,
        "contract": "contracts/timelock/FeedTimelock.sol:FeedTimelock",
        "label": "_startBlock",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3066,
        "contract": "contracts/timelock/FeedTimelock.sol:FeedTimelock",
        "label": "_releaseInterval",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3068,
        "contract": "contracts/timelock/FeedTimelock.sol:FeedTimelock",
        "label": "_releaseAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3070,
        "contract": "contracts/timelock/FeedTimelock.sol:FeedTimelock",
        "label": "_minLockAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1124": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}