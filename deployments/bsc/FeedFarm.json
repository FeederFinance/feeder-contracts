{
  "address": "0xd90A8878a2277879600AA2cba0CADC7E1a11354D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract FeedToken",
          "name": "_feed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devaddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_insAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feedPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reductionInterval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "EmissionRateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "Referral",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldBp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newBp",
          "type": "uint256"
        }
      ],
      "name": "ReferralBonusBpChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_userTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_reward",
          "type": "uint256"
        }
      ],
      "name": "ReferralPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_EXIT_FEE_BP",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_REFERRAL_BP",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_exitFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devAddr",
          "type": "address"
        }
      ],
      "name": "changeDevAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAddr",
          "type": "address"
        }
      ],
      "name": "changeFeeAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_insAddr",
          "type": "address"
        }
      ],
      "name": "changeInsAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feed",
      "outputs": [
        {
          "internalType": "contract FeedToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feedPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "getPoolIdForLpToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getReferral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastReductionBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingFeed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolExistence",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolIdForLpAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accFeedPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "exitFeeBP",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reductionInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refBonusBP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referredCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referrers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_exitFeeBP",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_withUpdate",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newEmissionRate",
          "type": "uint256"
        }
      ],
      "name": "updateEmissionRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newRefBonusBp",
          "type": "uint256"
        }
      ],
      "name": "updateReferralBonusBp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x819c42280aa34c8571826cc1162704e3365ebade1b291a436167bda30a4e06ee",
  "receipt": {
    "to": null,
    "from": "0x4e6b4569a3f191EE878235D263856A3CDc9536aA",
    "contractAddress": "0xd90A8878a2277879600AA2cba0CADC7E1a11354D",
    "transactionIndex": 98,
    "gasUsed": "2420188",
    "logsBloom": "0x
    "blockHash": "0xf721c76943c7465f87a96d5ff8eaa7b39094b8d7e9af3a7d581a62d7a183c034",
    "transactionHash": "0x819c42280aa34c8571826cc1162704e3365ebade1b291a436167bda30a4e06ee",
    "logs": [
      {
        "transactionIndex": 98,
        "blockNumber": 6809495,
        "transactionHash": "0x819c42280aa34c8571826cc1162704e3365ebade1b291a436167bda30a4e06ee",
        "address": "0xd90A8878a2277879600AA2cba0CADC7E1a11354D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004e6b4569a3f191ee878235d263856a3cdc9536aa"
        ],
        "data": "0x",
        "logIndex": 365,
        "blockHash": "0xf721c76943c7465f87a96d5ff8eaa7b39094b8d7e9af3a7d581a62d7a183c034"
      }
    ],
    "blockNumber": 6809495,
    "cumulativeGasUsed": "15934924",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x67d66e8Ec1Fd25d98B3Ccd3B19B7dc4b4b7fC493",
    "0x2De4c780Fb947805770ee0D93c091ee683EbddB6",
    "0x3F6E577e0D1af510A1ca8fe061f73eDa0c65cDA4",
    "0x7A818E7E0EdC038a3B80D4D8E55400b3c3eE8a00",
    "30000000000000000000",
    "7023000",
    "201600"
  ],
  "solcInputHash": "bb725bce1cc77098e6c99354c290e58e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.3+commit.9bfce1f6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract FeedToken\",\"name\":\"_feed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devaddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_insAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feedPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reductionInterval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"EmissionRateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"Referral\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldBp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newBp\",\"type\":\"uint256\"}],\"name\":\"ReferralBonusBpChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_userTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"}],\"name\":\"ReferralPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_EXIT_FEE_BP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAXIMUM_REFERRAL_BP\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_exitFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"}],\"name\":\"changeDevAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddr\",\"type\":\"address\"}],\"name\":\"changeFeeAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_insAddr\",\"type\":\"address\"}],\"name\":\"changeInsAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feed\",\"outputs\":[{\"internalType\":\"contract FeedToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feedPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getPoolIdForLpToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReductionBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingFeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolExistence\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolIdForLpAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accFeedPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"exitFeeBP\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reductionInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refBonusBP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referredCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_exitFeeBP\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEmissionRate\",\"type\":\"uint256\"}],\"name\":\"updateEmissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newRefBonusBp\",\"type\":\"uint256\"}],\"name\":\"updateReferralBonusBp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/farm/FeedFarm.sol\":\"FeedFarm\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\\n */\\nabstract contract ERC20Capped is ERC20 {\\n    using SafeMath for uint256;\\n\\n    uint256 private _cap;\\n\\n    /**\\n     * @dev Sets the value of the `cap`. This value is immutable, it can only be\\n     * set once during construction.\\n     */\\n    constructor (uint256 cap_) internal {\\n        require(cap_ > 0, \\\"ERC20Capped: cap is 0\\\");\\n        _cap = cap_;\\n    }\\n\\n    /**\\n     * @dev Returns the cap on the token's total supply.\\n     */\\n    function cap() public view virtual returns (uint256) {\\n        return _cap;\\n    }\\n\\n    /**\\n     * @dev See {ERC20-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - minted tokens must not cause the total supply to go over the cap.\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        super._beforeTokenTransfer(from, to, amount);\\n\\n        if (from == address(0)) { // When minting tokens\\n            require(totalSupply().add(amount) <= cap(), \\\"ERC20Capped: cap exceeded\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x94e4d02b80450cf26bec54be6c0cf52fe4e8ce91dfc6e97794dce19ded2a3fa4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/farm/FeedFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"../token/FeedToken.sol\\\";\\n\\ncontract FeedFarm is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // We do some fancy math here. Basically, any point in time, the amount of FEEDs\\n        // entitled to a user but is pending to be distributed is:\\n        //\\n        //   pending reward = (user.amount * pool.accFeedPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\n        //   1. The pool's `accFeedPerShare` (and `lastRewardBlock`) gets updated.\\n        //   2. User receives the pending reward sent to his/her address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of LP token contract.\\n        uint256 allocPoint; // How many allocation points assigned to this pool. FEEDs to distribute per block.\\n        uint256 lastRewardBlock; // Last block number that FEEDs distribution occurs.\\n        uint256 accFeedPerShare; // Accumulated FEEDs per share, times 1e12. See below.\\n        uint16 exitFeeBP; // Exit fee in basis points.\\n    }\\n    // The FEED TOKEN!\\n    FeedToken public feed;\\n    // Dev address.\\n    address public devAddr;\\n    // Insurance fund address.\\n    address public insAddr;\\n    // Fee collector address.\\n    address public feeAddr;\\n    // FEED tokens created per block.\\n    uint256 public feedPerBlock;\\n    // Reduction interval\\n    uint256 public reductionInterval;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation poitns. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n    // Referral Bonus in basis points. Initially set to 2%\\n    uint256 public refBonusBP = 200;\\n    // The block number when FEED mining starts.\\n    uint256 public startBlock;\\n    // Max Exit Fee: 10%.\\n    uint16 public constant MAXIMUM_EXIT_FEE_BP = 1000;\\n    // Max referral commission rate: 10%.\\n    uint16 public constant MAXIMUM_REFERRAL_BP = 1000;\\n    // Referral Mapping\\n    mapping(address => address) public referrers; // account_address -> referrer_address\\n    mapping(address => uint256) public referredCount; // referrer_address -> num_of_referred\\n    // Pool Exists Mapper\\n    mapping(IERC20 => bool) public poolExistence;\\n    // Pool ID Tracker Mapper\\n    mapping(IERC20 => uint256) public poolIdForLpAddress;\\n    // Last reduction block\\n    uint256 public lastReductionBlock = 0;\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Referral(address indexed _referrer, address indexed _user);\\n    event ReferralPaid(address indexed _user, address indexed _userTo, uint256 _reward);\\n    event ReferralBonusBpChanged(uint256 _oldBp, uint256 _newBp);\\n    event EmissionRateUpdated(address indexed caller, uint256 previousAmount, uint256 newAmount);\\n\\n    constructor(\\n        FeedToken _feed,\\n        address _devaddr,\\n        address _insAddr,\\n        address _feeAddr,\\n        uint256 _feedPerBlock,\\n        uint256 _startBlock,\\n        uint256 _reductionInterval\\n    ) public {\\n        feed = _feed;\\n        devAddr = _devaddr;\\n        insAddr = _insAddr;\\n        feeAddr = _feeAddr;\\n        feedPerBlock = _feedPerBlock;\\n        startBlock = _startBlock;\\n        reductionInterval = _reductionInterval;\\n    }\\n\\n    // Get number of pools added.\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Get Pool ID by Token\\n    function getPoolIdForLpToken(IERC20 _lpToken) external view returns (uint256) {\\n        require(poolExistence[_lpToken] != false, \\\"Farm: Token does not exists in any pool\\\");\\n        return poolIdForLpAddress[_lpToken];\\n    }\\n\\n    // Modifier to check Duplicate pools\\n    modifier nonDuplicated(IERC20 _lpToken) {\\n        require(poolExistence[_lpToken] == false, \\\"Farm: Duplicated pool\\\");\\n        _;\\n    }\\n\\n    // Add a new lp to the pool. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        uint16 _exitFeeBP,\\n        bool _withUpdate\\n    ) public onlyOwner nonDuplicated(_lpToken) {\\n        require(_exitFeeBP <= MAXIMUM_EXIT_FEE_BP, \\\"Farm(add): invalid exit fee basis points\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n        poolExistence[_lpToken] = true;\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accFeedPerShare: 0,\\n                exitFeeBP: _exitFeeBP\\n            })\\n        );\\n        poolIdForLpAddress[_lpToken] = poolInfo.length - 1;\\n    }\\n\\n    // Update the given pool's FEED allocation point. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        uint16 _exitFeeBP,\\n        bool _withUpdate\\n    ) public onlyOwner {\\n        require(_exitFeeBP <= MAXIMUM_EXIT_FEE_BP, \\\"Farm(set): invalid exit fee basis points\\\");\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        poolInfo[_pid].exitFeeBP = _exitFeeBP;\\n    }\\n\\n    // Return reward multiplier over the given _from to _to block.\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        return _to.sub(_from);\\n    }\\n\\n    // View function to see pending FEEDs on frontend.\\n    function pendingFeed(uint256 _pid, address _user) external view returns (uint256) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accFeedPerShare = pool.accFeedPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n            uint256 feedReward = multiplier.mul(feedPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n            accFeedPerShare = accFeedPerShare.add(feedReward.mul(1e12).div(lpSupply));\\n        }\\n        return user.amount.mul(accFeedPerShare).div(1e12).sub(user.rewardDebt);\\n    }\\n\\n    // Update reward vairables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (lpSupply == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        uint256 feedTotalCap = feed.cap();\\n        uint256 feedTotalSupply = feed.totalSupply();\\n        uint256 remainingFeed = feedTotalCap.sub(feedTotalSupply);\\n        uint256 feedReward = multiplier.mul(feedPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\\n        if (remainingFeed < feedReward) {\\n            feedReward = remainingFeed;\\n        }\\n        uint256 devReward = feedReward.div(20); // 5% Feed to Dev Fund\\n        uint256 insReward = feedReward.div(50); // 2% Feed to Insurance Fund\\n        uint256 userReward = feedReward.sub(devReward).sub(insReward);\\n        feed.mintTo(address(this), userReward);\\n        feed.mintTo(devAddr, devReward);\\n        feed.mintTo(insAddr, insReward);\\n        pool.accFeedPerShare = pool.accFeedPerShare.add(userReward.mul(1e12).div(lpSupply));\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    // Deposit LP tokens to FeedFarm for FEED allocation.\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        address _referrer\\n    ) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        updatePool(_pid);\\n        if (user.amount > 0) {\\n            uint256 pending = user.amount.mul(pool.accFeedPerShare).div(1e12).sub(user.rewardDebt);\\n            if (pending > 0) {\\n                payReferralCommission(msg.sender, pending);\\n            }\\n        }\\n        if (_amount > 0) {\\n            setReferral(msg.sender, _referrer);\\n            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n            user.amount = user.amount.add(_amount);\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accFeedPerShare).div(1e12);\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from FeedFarm.\\n    function withdraw(uint256 _pid, uint256 _amount) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"Farm: Withdraw amount is larger than available balance\\\");\\n        updatePool(_pid);\\n        uint256 pending = user.amount.mul(pool.accFeedPerShare).div(1e12).sub(user.rewardDebt);\\n        if (pending > 0) {\\n            payReferralCommission(msg.sender, pending);\\n        }\\n        if (_amount > 0) {\\n            if (pool.exitFeeBP > 0) {\\n                uint256 exitFee = _amount.mul(pool.exitFeeBP).div(10000);\\n                user.amount = user.amount.sub(_amount);\\n                pool.lpToken.safeTransfer(address(msg.sender), _amount.sub(exitFee));\\n                pool.lpToken.safeTransfer(feeAddr, exitFee);\\n            } else {\\n                user.amount = user.amount.sub(_amount);\\n                pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n            }\\n        }\\n        user.rewardDebt = user.amount.mul(pool.accFeedPerShare).div(1e12);\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n    }\\n\\n    // Safe feed transfer function, just in case if rounding error causes pool to not have enough FEEDs.\\n    function safeFeedTransfer(address _to, uint256 _amount) internal {\\n        uint256 feedBal = feed.balanceOf(address(this));\\n        if (_amount > feedBal) {\\n            feed.transfer(_to, feedBal);\\n        } else {\\n            feed.transfer(_to, _amount);\\n        }\\n    }\\n\\n    // Update dev address by the previous dev\\n    function changeDevAddr(address _devAddr) public {\\n        require(msg.sender == devAddr, \\\"Farm: Only dev can change dev address\\\");\\n        devAddr = _devAddr;\\n    }\\n\\n    // Update insurance address by previous insurer\\n    function changeInsAddr(address _insAddr) public {\\n        require(msg.sender == insAddr, \\\"Farm: Only insurer can change insurance address\\\");\\n        insAddr = _insAddr;\\n    }\\n\\n    // Update fees collector address by previous fees collector\\n    function changeFeeAddr(address _feeAddr) public {\\n        require(msg.sender == feeAddr, \\\"Farm: Only fee collector can change fee collector address\\\");\\n        feeAddr = _feeAddr;\\n    }\\n\\n    // Update to emission rate (feedPerBlock)\\n    function updateEmissionRate(uint256 newEmissionRate) public onlyOwner {\\n        require(block.number > startBlock, \\\"Farm: Emission rate can only update after mining starts\\\");\\n        require(block.number >= lastReductionBlock.add(reductionInterval), \\\"Farm: Emission rate in reduction interval\\\");\\n        massUpdatePools();\\n        lastReductionBlock = block.number;\\n        uint256 previousEmissionRate = feedPerBlock;\\n        feedPerBlock = newEmissionRate;\\n        emit EmissionRateUpdated(msg.sender, previousEmissionRate, newEmissionRate);\\n    }\\n\\n    // Set Referral Address for a user\\n    function setReferral(address _user, address _referrer) internal {\\n        if (_referrer == address(_referrer) && referrers[_user] == address(0) && _referrer != address(0) && _referrer != _user) {\\n            referrers[_user] = _referrer;\\n            referredCount[_referrer] += 1;\\n            emit Referral(_user, _referrer);\\n        }\\n    }\\n\\n    // Get Referral Address for a Account\\n    function getReferral(address _user) public view returns (address) {\\n        return referrers[_user];\\n    }\\n\\n    // Pay referral commission to the referrer who referred this user.\\n    function payReferralCommission(address _user, uint256 _pending) internal {\\n        address referrer = getReferral(_user);\\n        if (referrer != address(0) && referrer != _user && refBonusBP > 0) {\\n            uint256 refBonusEarned = _pending.mul(refBonusBP).div(10000);\\n            safeFeedTransfer(referrer, refBonusEarned);\\n            safeFeedTransfer(_user, _pending.sub(refBonusEarned));\\n            emit ReferralPaid(_user, referrer, refBonusEarned);\\n        } else {\\n            safeFeedTransfer(_user, _pending);\\n        }\\n    }\\n\\n    // Referral Bonus in basis points.\\n    // Initially set to 2%, this this the ability to increase or decrease the Bonus percentage based on\\n    // community voting and feedback.\\n    function updateReferralBonusBp(uint256 _newRefBonusBp) public onlyOwner {\\n        require(_newRefBonusBp <= MAXIMUM_REFERRAL_BP, \\\"Farm: Referral bonus has reached maxmimum threshold\\\");\\n        require(_newRefBonusBp != refBonusBP, \\\"Farm: Referral bonus is the same\\\");\\n        uint256 previousRefBonusBP = refBonusBP;\\n        refBonusBP = _newRefBonusBp;\\n        emit ReferralBonusBpChanged(previousRefBonusBP, _newRefBonusBp);\\n    }\\n}\\n\",\"keccak256\":\"0x9f185e8773c6a745b0db51179a7ad0756ef428e9ed883e09e08c5839dfc64db8\",\"license\":\"MIT\"},\"contracts/token/FeedToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0 <0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Capped.sol\\\";\\n\\ncontract FeedToken is ERC20Capped, Ownable {\\n    address public treasuryAddress;\\n\\n    constructor(address _treasury, uint256 _cap) ERC20(\\\"Feeder.finance\\\", \\\"FEED\\\") ERC20Capped(_cap) {\\n        treasuryAddress = _treasury;\\n\\n        mintTo(treasuryAddress, 31750000 ether);\\n    }\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner.\\n    function mintTo(address _to, uint256 _amount) public onlyOwner {\\n        _mint(_to, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0xeb80e7412856731450a9587dafa7dce01b15b760c071efc37269810c35fbb7f3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600a5560c8600b55600060115534801561001f57600080fd5b506040516200283038038062002830833981810160405260e081101561004457600080fd5b508051602082015160408301516060840151608085015160a086015160c0909601519495939492939192909190600061007b61012e565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35060018055600280546001600160a01b039889166001600160a01b0319918216179091556003805497891697821697909717909655600480549588169587169590951790945560058054939096169290941691909117909355600692909255600c55600755610132565b3390565b6126ee80620001426000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c8063630b5ba1116101305780639bf62f7e116100b8578063d96384221161007c578063d96384221461061b578063da09c72c14610650578063e3960bd914610658578063ec96462914610660578063f2fde38b1461068657610232565b80639bf62f7e1461058d578063a3bd99ec146105b3578063b1b3ca4514610372578063c0af2e48146105d9578063cbd258b5146105e157610232565b806384e82a33116100ff57806384e82a33146104ad5780638da5cb5b146104eb5780638dbb1e3a146104f35780638dbdbe6d1461051657806393f1a40b1461054857610232565b8063630b5ba11461047857806364ed743b1461048057806366f685ea1461049d578063715018a6146104a557610232565b80633a22df78116101be57806347cd35f11161018257806347cd35f11461040857806348cd4cb1146104105780634a3b68cc1461041857806351eb05a61461043e5780635312ea8e1461045b57610232565b80633a22df78146103725780633b0f0f2f146103915780633f7b06d8146103b7578063436b7868146103dd578063441a3e70146103e557610232565b806317caf6f11161020557806317caf6f1146102ec578063190f39f0146102f457806337a7b7d81461031a57806339851eaf1461033e57806339e7fddc1461036a57610232565b8063081e3eda146102375780630ba84cd2146102515780631526fe271461027057806315acc16f146102c6575b600080fd5b61023f6106ac565b60408051918252519081900360200190f35b61026e6004803603602081101561026757600080fd5b50356106b2565b005b61028d6004803603602081101561028657600080fd5b50356107f3565b604080516001600160a01b039096168652602086019490945284840192909252606084015261ffff166080830152519081900360a00190f35b61026e600480360360208110156102dc57600080fd5b50356001600160a01b031661083f565b61023f6108aa565b61023f6004803603602081101561030a57600080fd5b50356001600160a01b03166108b0565b610322610923565b604080516001600160a01b039092168252519081900360200190f35b61023f6004803603604081101561035457600080fd5b50803590602001356001600160a01b0316610932565b610322610aa4565b61037a610ab3565b6040805161ffff9092168252519081900360200190f35b610322600480360360208110156103a757600080fd5b50356001600160a01b0316610ab9565b61023f600480360360208110156103cd57600080fd5b50356001600160a01b0316610ad7565b610322610ae9565b61026e600480360360408110156103fb57600080fd5b5080359060200135610af8565b61023f610d24565b61023f610d2a565b6103226004803603602081101561042e57600080fd5b50356001600160a01b0316610d30565b61026e6004803603602081101561045457600080fd5b5035610d4b565b61026e6004803603602081101561047157600080fd5b503561110f565b61026e61120c565b61026e6004803603602081101561049657600080fd5b503561122f565b61023f611370565b61026e611376565b61026e600480360360808110156104c357600080fd5b508035906001600160a01b036020820135169061ffff60408201351690606001351515611422565b6103226116ca565b61023f6004803603604081101561050957600080fd5b50803590602001356116d9565b61026e6004803603606081101561052c57600080fd5b50803590602081013590604001356001600160a01b03166116ec565b6105746004803603604081101561055e57600080fd5b50803590602001356001600160a01b031661186d565b6040805192835260208301919091528051918290030190f35b61023f600480360360208110156105a357600080fd5b50356001600160a01b0316611891565b61026e600480360360208110156105c957600080fd5b50356001600160a01b03166118a3565b61023f61190e565b610607600480360360208110156105f757600080fd5b50356001600160a01b0316611914565b604080519115158252519081900360200190f35b61026e6004803603608081101561063157600080fd5b5080359060208101359061ffff60408201351690606001351515611929565b610322611a83565b61023f611a92565b61026e6004803603602081101561067657600080fd5b50356001600160a01b0316611a98565b61026e6004803603602081101561069c57600080fd5b50356001600160a01b0316611b03565b60085490565b6106ba611c05565b6001600160a01b03166106cb6116ca565b6001600160a01b031614610714576040805162461bcd60e51b81526020600482018190526024820152600080516020612587833981519152604482015290519081900360640190fd5b600c5443116107545760405162461bcd60e51b81526004018080602001828103825260378152602001806125a76037913960400191505060405180910390fd5b60075460115461076391611c09565b4310156107a15760405162461bcd60e51b81526004018080602001828103825260298152602001806125186029913960400191505060405180910390fd5b6107a961120c565b4360115560068054908290556040805182815260208101849052815133927feedc6338c9c1ad8f3cd6c90dd09dbe98dbd57e610d3e59a17996d07acb0d9511928290030190a25050565b6008818154811061080057fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909161ffff1685565b6004546001600160a01b031633146108885760405162461bcd60e51b815260040180806020018281038252602f815260200180612611602f913960400191505060405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b600a5481565b6001600160a01b0381166000908152600f602052604081205460ff166109075760405162461bcd60e51b81526004018080602001828103825260278152602001806126926027913960400191505060405180910390fd5b506001600160a01b031660009081526010602052604090205490565b6002546001600160a01b031681565b6000806008848154811061094257fe5b600091825260208083208784526009825260408085206001600160a01b0389811687529084528186206005959095029092016003810154815483516370a0823160e01b815230600482015293519298509596909590949316926370a082319260248082019391829003018186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d60208110156109e657600080fd5b50516002850154909150431180156109fd57508015155b15610a69576000610a128560020154436116d9565b90506000610a45600a54610a3f8860010154610a3960065487611c6390919063ffffffff16565b90611c63565b90611cbc565b9050610a64610a5d84610a3f8464e8d4a51000611c63565b8590611c09565b935050505b610a978360010154610a9164e8d4a51000610a3f868860000154611c6390919063ffffffff16565b90611d23565b9450505050505b92915050565b6005546001600160a01b031681565b6103e881565b6001600160a01b039081166000908152600d60205260409020541690565b600e6020526000908152604090205481565b6004546001600160a01b031681565b60026001541415610b50576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600181905550600060088381548110610b6757fe5b600091825260208083208684526009825260408085203386529092529220805460059092029092019250831115610bcf5760405162461bcd60e51b81526004018080602001828103825260368152602001806124a96036913960400191505060405180910390fd5b610bd884610d4b565b6000610c068260010154610a9164e8d4a51000610a3f87600301548760000154611c6390919063ffffffff16565b90508015610c1857610c183382611d80565b8315610cc257600483015461ffff1615610c9e576004830154600090610c4b9061271090610a3f90889061ffff16611c63565b8354909150610c5a9086611d23565b8355610c7c33610c6a8784611d23565b86546001600160a01b03169190611e66565b6005548454610c98916001600160a01b03918216911683611e66565b50610cc2565b8154610caa9085611d23565b82558254610cc2906001600160a01b03163386611e66565b60038301548254610cdd9164e8d4a5100091610a3f91611c63565b6001830155604080518581529051869133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3505060018055505050565b60065481565b600c5481565b600d602052600090815260409020546001600160a01b031681565b600060088281548110610d5a57fe5b9060005260206000209060050201905080600201544311610d7b575061110c565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610dc557600080fd5b505afa158015610dd9573d6000803e3d6000fd5b505050506040513d6020811015610def57600080fd5b5051905080610e0557504360029091015561110c565b6000610e158360020154436116d9565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663355274ea6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6757600080fd5b505afa158015610e7b573d6000803e3d6000fd5b505050506040513d6020811015610e9157600080fd5b5051600254604080516318160ddd60e01b815290519293506000926001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b158015610ede57600080fd5b505afa158015610ef2573d6000803e3d6000fd5b505050506040513d6020811015610f0857600080fd5b505190506000610f188383611d23565b90506000610f3f600a54610a3f8960010154610a396006548a611c6390919063ffffffff16565b905080821015610f4c5750805b6000610f59826014611cbc565b90506000610f68836032611cbc565b90506000610f7a82610a918686611d23565b600254604080516308934a5f60e31b81523060048201526024810184905290519293506001600160a01b039091169163449a52f89160448082019260009290919082900301818387803b158015610fd057600080fd5b505af1158015610fe4573d6000803e3d6000fd5b5050600254600354604080516308934a5f60e31b81526001600160a01b03928316600482015260248101899052905191909216935063449a52f89250604480830192600092919082900301818387803b15801561104057600080fd5b505af1158015611054573d6000803e3d6000fd5b505060025460048054604080516308934a5f60e31b81526001600160a01b039283169381019390935260248301889052519216935063449a52f8925060448082019260009290919082900301818387803b1580156110b157600080fd5b505af11580156110c5573d6000803e3d6000fd5b505050506110f36110e88a610a3f64e8d4a5100085611c6390919063ffffffff16565b60038c015490611c09565b60038b0155505043600290980197909755505050505050505b50565b60026001541415611167576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260018190555060006008828154811061117e57fe5b600091825260208083208584526009825260408085203380875293529093208054600590930290930180549094506111c3926001600160a01b03919091169190611e66565b80546040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a3600080825560019182015580555050565b60085460005b8181101561122b5761122381610d4b565b600101611212565b5050565b611237611c05565b6001600160a01b03166112486116ca565b6001600160a01b031614611291576040805162461bcd60e51b81526020600482018190526024820152600080516020612587833981519152604482015290519081900360640190fd5b6103e88111156112d25760405162461bcd60e51b81526004018080602001828103825260338152602001806125de6033913960400191505060405180910390fd5b600b54811415611329576040805162461bcd60e51b815260206004820181905260248201527f4661726d3a20526566657272616c20626f6e7573206973207468652073616d65604482015290519081900360640190fd5b600b805490829055604080518281526020810184905281517f3282b692bfebf5f35b198a229212cf532c72099026ab54c4b8665382d1086b3f929181900390910190a15050565b600b5481565b61137e611c05565b6001600160a01b031661138f6116ca565b6001600160a01b0316146113d8576040805162461bcd60e51b81526020600482018190526024820152600080516020612587833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61142a611c05565b6001600160a01b031661143b6116ca565b6001600160a01b031614611484576040805162461bcd60e51b81526020600482018190526024820152600080516020612587833981519152604482015290519081900360640190fd5b6001600160a01b0383166000908152600f6020526040902054839060ff16156114ec576040805162461bcd60e51b815260206004820152601560248201527411985c9b4e88111d5c1b1a58d85d1959081c1bdbdb605a1b604482015290519081900360640190fd5b6103e861ffff841611156115315760405162461bcd60e51b81526004018080602001828103825260288152602001806126406028913960400191505060405180910390fd5b811561153f5761153f61120c565b6000600c54431161155257600c54611554565b435b600a549091506115649087611c09565b600a556001600160a01b039485166000818152600f602090815260408083208054600160ff199091168117909155815160a0810183528581528084019b8c528083019687526060810185815261ffff9a8b166080830190815260088054948501815580885292517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3600590950294850180546001600160a01b03191691909e1617909c559b517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee483015595517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee582015599517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee68b015597517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee7909901805461ffff1916999097169890981790955590549084526010909552505020600019919091019055565b6000546001600160a01b031690565b60006116e58284611d23565b9392505050565b60026001541415611744576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260018190555060006008848154811061175b57fe5b6000918252602080832087845260098252604080852033865290925292206005909102909101915061178c85610d4b565b8054156117d55760006117c18260010154610a9164e8d4a51000610a3f87600301548760000154611c6390919063ffffffff16565b905080156117d3576117d33382611d80565b505b831561180b576117e53384611eb8565b81546117fc906001600160a01b0316333087611f76565b80546118089085611c09565b81555b600382015481546118269164e8d4a5100091610a3f91611c63565b6001820155604080518581529051869133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a3505060018055505050565b60096020908152600092835260408084209091529082529020805460019091015482565b60106020526000908152604090205481565b6003546001600160a01b031633146118ec5760405162461bcd60e51b81526004018080602001828103825260258152602001806125626025913960400191505060405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60115481565b600f6020526000908152604090205460ff1681565b611931611c05565b6001600160a01b03166119426116ca565b6001600160a01b03161461198b576040805162461bcd60e51b81526020600482018190526024820152600080516020612587833981519152604482015290519081900360640190fd5b6103e861ffff831611156119d05760405162461bcd60e51b81526004018080602001828103825260288152602001806124816028913960400191505060405180910390fd5b80156119de576119de61120c565b611a1b83611a15600887815481106119f257fe5b906000526020600020906005020160010154600a54611d2390919063ffffffff16565b90611c09565b600a819055508260088581548110611a2f57fe5b9060005260206000209060050201600101819055508160088581548110611a5257fe5b906000526020600020906005020160040160006101000a81548161ffff021916908361ffff16021790555050505050565b6003546001600160a01b031681565b60075481565b6005546001600160a01b03163314611ae15760405162461bcd60e51b81526004018080602001828103825260398152602001806124df6039913960400191505060405180910390fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b611b0b611c05565b6001600160a01b0316611b1c6116ca565b6001600160a01b031614611b65576040805162461bcd60e51b81526020600482018190526024820152600080516020612587833981519152604482015290519081900360640190fd5b6001600160a01b038116611baa5760405162461bcd60e51b81526004018080602001828103825260268152602001806124356026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6000828201838110156116e5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082611c7257506000610a9e565b82820282848281611c7f57fe5b04146116e55760405162461bcd60e51b81526004018080602001828103825260218152602001806125416021913960400191505060405180910390fd5b6000808211611d12576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611d1b57fe5b049392505050565b600082821115611d7a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000611d8b83610ab9565b90506001600160a01b03811615801590611db75750826001600160a01b0316816001600160a01b031614155b8015611dc557506000600b54115b15611e57576000611de7612710610a3f600b5486611c6390919063ffffffff16565b9050611df38282611fd6565b611e0684611e018584611d23565b611fd6565b816001600160a01b0316846001600160a01b03167f0a721ab4682ceb61c7e4d264ef879fc419a6d764b136e7d96ef54b2053c75673836040518082815260200191505060405180910390a350611e61565b611e618383611fd6565b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611e61908490612166565b6001600160a01b038281166000908152600d602052604090205416158015611ee857506001600160a01b03811615155b8015611f065750816001600160a01b0316816001600160a01b031614155b1561122b576001600160a01b038281166000818152600d6020908152604080832080546001600160a01b0319169587169586179055848352600e90915280822080546001019055517f9d05414fb79fac216c15606de5cc06664e91a254e4d5f57664d5f1beaf7fb7ef9190a35050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611fd0908590612166565b50505050565b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561202157600080fd5b505afa158015612035573d6000803e3d6000fd5b505050506040513d602081101561204b57600080fd5b50519050808211156120df576002546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156120ad57600080fd5b505af11580156120c1573d6000803e3d6000fd5b505050506040513d60208110156120d757600080fd5b50611e619050565b6002546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561213557600080fd5b505af1158015612149573d6000803e3d6000fd5b505050506040513d602081101561215f57600080fd5b5050505050565b60606121bb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122179092919063ffffffff16565b805190915015611e61578080602001905160208110156121da57600080fd5b5051611e615760405162461bcd60e51b815260040180806020018281038252602a815260200180612668602a913960400191505060405180910390fd5b6060612226848460008561222e565b949350505050565b60608247101561226f5760405162461bcd60e51b815260040180806020018281038252602681526020018061245b6026913960400191505060405180910390fd5b6122788561238a565b6122c9576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106123085780518252601f1990920191602091820191016122e9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461236a576040519150601f19603f3d011682016040523d82523d6000602084013e61236f565b606091505b509150915061237f828286612390565b979650505050505050565b3b151590565b6060831561239f5750816116e5565b8251156123af5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156123f95781810151838201526020016123e1565b50505050905090810190601f1680156124265780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4661726d28736574293a20696e76616c696420657869742066656520626173697320706f696e74734661726d3a20576974686472617720616d6f756e74206973206c6172676572207468616e20617661696c61626c652062616c616e63654661726d3a204f6e6c792066656520636f6c6c6563746f722063616e206368616e67652066656520636f6c6c6563746f7220616464726573734661726d3a20456d697373696f6e207261746520696e20726564756374696f6e20696e74657276616c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774661726d3a204f6e6c79206465762063616e206368616e67652064657620616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724661726d3a20456d697373696f6e20726174652063616e206f6e6c7920757064617465206166746572206d696e696e67207374617274734661726d3a20526566657272616c20626f6e7573206861732072656163686564206d61786d696d756d207468726573686f6c644661726d3a204f6e6c7920696e73757265722063616e206368616e676520696e737572616e636520616464726573734661726d28616464293a20696e76616c696420657869742066656520626173697320706f696e74735361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644661726d3a20546f6b656e20646f6573206e6f742065786973747320696e20616e7920706f6f6ca264697066735822122047c3310910556a3aee1670050fd9b88dfe4e765d78e412882353657fb8e10f6364736f6c63430007030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c8063630b5ba1116101305780639bf62f7e116100b8578063d96384221161007c578063d96384221461061b578063da09c72c14610650578063e3960bd914610658578063ec96462914610660578063f2fde38b1461068657610232565b80639bf62f7e1461058d578063a3bd99ec146105b3578063b1b3ca4514610372578063c0af2e48146105d9578063cbd258b5146105e157610232565b806384e82a33116100ff57806384e82a33146104ad5780638da5cb5b146104eb5780638dbb1e3a146104f35780638dbdbe6d1461051657806393f1a40b1461054857610232565b8063630b5ba11461047857806364ed743b1461048057806366f685ea1461049d578063715018a6146104a557610232565b80633a22df78116101be57806347cd35f11161018257806347cd35f11461040857806348cd4cb1146104105780634a3b68cc1461041857806351eb05a61461043e5780635312ea8e1461045b57610232565b80633a22df78146103725780633b0f0f2f146103915780633f7b06d8146103b7578063436b7868146103dd578063441a3e70146103e557610232565b806317caf6f11161020557806317caf6f1146102ec578063190f39f0146102f457806337a7b7d81461031a57806339851eaf1461033e57806339e7fddc1461036a57610232565b8063081e3eda146102375780630ba84cd2146102515780631526fe271461027057806315acc16f146102c6575b600080fd5b61023f6106ac565b60408051918252519081900360200190f35b61026e6004803603602081101561026757600080fd5b50356106b2565b005b61028d6004803603602081101561028657600080fd5b50356107f3565b604080516001600160a01b039096168652602086019490945284840192909252606084015261ffff166080830152519081900360a00190f35b61026e600480360360208110156102dc57600080fd5b50356001600160a01b031661083f565b61023f6108aa565b61023f6004803603602081101561030a57600080fd5b50356001600160a01b03166108b0565b610322610923565b604080516001600160a01b039092168252519081900360200190f35b61023f6004803603604081101561035457600080fd5b50803590602001356001600160a01b0316610932565b610322610aa4565b61037a610ab3565b6040805161ffff9092168252519081900360200190f35b610322600480360360208110156103a757600080fd5b50356001600160a01b0316610ab9565b61023f600480360360208110156103cd57600080fd5b50356001600160a01b0316610ad7565b610322610ae9565b61026e600480360360408110156103fb57600080fd5b5080359060200135610af8565b61023f610d24565b61023f610d2a565b6103226004803603602081101561042e57600080fd5b50356001600160a01b0316610d30565b61026e6004803603602081101561045457600080fd5b5035610d4b565b61026e6004803603602081101561047157600080fd5b503561110f565b61026e61120c565b61026e6004803603602081101561049657600080fd5b503561122f565b61023f611370565b61026e611376565b61026e600480360360808110156104c357600080fd5b508035906001600160a01b036020820135169061ffff60408201351690606001351515611422565b6103226116ca565b61023f6004803603604081101561050957600080fd5b50803590602001356116d9565b61026e6004803603606081101561052c57600080fd5b50803590602081013590604001356001600160a01b03166116ec565b6105746004803603604081101561055e57600080fd5b50803590602001356001600160a01b031661186d565b6040805192835260208301919091528051918290030190f35b61023f600480360360208110156105a357600080fd5b50356001600160a01b0316611891565b61026e600480360360208110156105c957600080fd5b50356001600160a01b03166118a3565b61023f61190e565b610607600480360360208110156105f757600080fd5b50356001600160a01b0316611914565b604080519115158252519081900360200190f35b61026e6004803603608081101561063157600080fd5b5080359060208101359061ffff60408201351690606001351515611929565b610322611a83565b61023f611a92565b61026e6004803603602081101561067657600080fd5b50356001600160a01b0316611a98565b61026e6004803603602081101561069c57600080fd5b50356001600160a01b0316611b03565b60085490565b6106ba611c05565b6001600160a01b03166106cb6116ca565b6001600160a01b031614610714576040805162461bcd60e51b81526020600482018190526024820152600080516020612587833981519152604482015290519081900360640190fd5b600c5443116107545760405162461bcd60e51b81526004018080602001828103825260378152602001806125a76037913960400191505060405180910390fd5b60075460115461076391611c09565b4310156107a15760405162461bcd60e51b81526004018080602001828103825260298152602001806125186029913960400191505060405180910390fd5b6107a961120c565b4360115560068054908290556040805182815260208101849052815133927feedc6338c9c1ad8f3cd6c90dd09dbe98dbd57e610d3e59a17996d07acb0d9511928290030190a25050565b6008818154811061080057fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909161ffff1685565b6004546001600160a01b031633146108885760405162461bcd60e51b815260040180806020018281038252602f815260200180612611602f913960400191505060405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b600a5481565b6001600160a01b0381166000908152600f602052604081205460ff166109075760405162461bcd60e51b81526004018080602001828103825260278152602001806126926027913960400191505060405180910390fd5b506001600160a01b031660009081526010602052604090205490565b6002546001600160a01b031681565b6000806008848154811061094257fe5b600091825260208083208784526009825260408085206001600160a01b0389811687529084528186206005959095029092016003810154815483516370a0823160e01b815230600482015293519298509596909590949316926370a082319260248082019391829003018186803b1580156109bc57600080fd5b505afa1580156109d0573d6000803e3d6000fd5b505050506040513d60208110156109e657600080fd5b50516002850154909150431180156109fd57508015155b15610a69576000610a128560020154436116d9565b90506000610a45600a54610a3f8860010154610a3960065487611c6390919063ffffffff16565b90611c63565b90611cbc565b9050610a64610a5d84610a3f8464e8d4a51000611c63565b8590611c09565b935050505b610a978360010154610a9164e8d4a51000610a3f868860000154611c6390919063ffffffff16565b90611d23565b9450505050505b92915050565b6005546001600160a01b031681565b6103e881565b6001600160a01b039081166000908152600d60205260409020541690565b600e6020526000908152604090205481565b6004546001600160a01b031681565b60026001541415610b50576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600181905550600060088381548110610b6757fe5b600091825260208083208684526009825260408085203386529092529220805460059092029092019250831115610bcf5760405162461bcd60e51b81526004018080602001828103825260368152602001806124a96036913960400191505060405180910390fd5b610bd884610d4b565b6000610c068260010154610a9164e8d4a51000610a3f87600301548760000154611c6390919063ffffffff16565b90508015610c1857610c183382611d80565b8315610cc257600483015461ffff1615610c9e576004830154600090610c4b9061271090610a3f90889061ffff16611c63565b8354909150610c5a9086611d23565b8355610c7c33610c6a8784611d23565b86546001600160a01b03169190611e66565b6005548454610c98916001600160a01b03918216911683611e66565b50610cc2565b8154610caa9085611d23565b82558254610cc2906001600160a01b03163386611e66565b60038301548254610cdd9164e8d4a5100091610a3f91611c63565b6001830155604080518581529051869133917ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5689181900360200190a3505060018055505050565b60065481565b600c5481565b600d602052600090815260409020546001600160a01b031681565b600060088281548110610d5a57fe5b9060005260206000209060050201905080600201544311610d7b575061110c565b8054604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610dc557600080fd5b505afa158015610dd9573d6000803e3d6000fd5b505050506040513d6020811015610def57600080fd5b5051905080610e0557504360029091015561110c565b6000610e158360020154436116d9565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663355274ea6040518163ffffffff1660e01b815260040160206040518083038186803b158015610e6757600080fd5b505afa158015610e7b573d6000803e3d6000fd5b505050506040513d6020811015610e9157600080fd5b5051600254604080516318160ddd60e01b815290519293506000926001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b158015610ede57600080fd5b505afa158015610ef2573d6000803e3d6000fd5b505050506040513d6020811015610f0857600080fd5b505190506000610f188383611d23565b90506000610f3f600a54610a3f8960010154610a396006548a611c6390919063ffffffff16565b905080821015610f4c5750805b6000610f59826014611cbc565b90506000610f68836032611cbc565b90506000610f7a82610a918686611d23565b600254604080516308934a5f60e31b81523060048201526024810184905290519293506001600160a01b039091169163449a52f89160448082019260009290919082900301818387803b158015610fd057600080fd5b505af1158015610fe4573d6000803e3d6000fd5b5050600254600354604080516308934a5f60e31b81526001600160a01b03928316600482015260248101899052905191909216935063449a52f89250604480830192600092919082900301818387803b15801561104057600080fd5b505af1158015611054573d6000803e3d6000fd5b505060025460048054604080516308934a5f60e31b81526001600160a01b039283169381019390935260248301889052519216935063449a52f8925060448082019260009290919082900301818387803b1580156110b157600080fd5b505af11580156110c5573d6000803e3d6000fd5b505050506110f36110e88a610a3f64e8d4a5100085611c6390919063ffffffff16565b60038c015490611c09565b60038b0155505043600290980197909755505050505050505b50565b60026001541415611167576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260018190555060006008828154811061117e57fe5b600091825260208083208584526009825260408085203380875293529093208054600590930290930180549094506111c3926001600160a01b03919091169190611e66565b80546040805191825251849133917fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05959181900360200190a3600080825560019182015580555050565b60085460005b8181101561122b5761122381610d4b565b600101611212565b5050565b611237611c05565b6001600160a01b03166112486116ca565b6001600160a01b031614611291576040805162461bcd60e51b81526020600482018190526024820152600080516020612587833981519152604482015290519081900360640190fd5b6103e88111156112d25760405162461bcd60e51b81526004018080602001828103825260338152602001806125de6033913960400191505060405180910390fd5b600b54811415611329576040805162461bcd60e51b815260206004820181905260248201527f4661726d3a20526566657272616c20626f6e7573206973207468652073616d65604482015290519081900360640190fd5b600b805490829055604080518281526020810184905281517f3282b692bfebf5f35b198a229212cf532c72099026ab54c4b8665382d1086b3f929181900390910190a15050565b600b5481565b61137e611c05565b6001600160a01b031661138f6116ca565b6001600160a01b0316146113d8576040805162461bcd60e51b81526020600482018190526024820152600080516020612587833981519152604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b61142a611c05565b6001600160a01b031661143b6116ca565b6001600160a01b031614611484576040805162461bcd60e51b81526020600482018190526024820152600080516020612587833981519152604482015290519081900360640190fd5b6001600160a01b0383166000908152600f6020526040902054839060ff16156114ec576040805162461bcd60e51b815260206004820152601560248201527411985c9b4e88111d5c1b1a58d85d1959081c1bdbdb605a1b604482015290519081900360640190fd5b6103e861ffff841611156115315760405162461bcd60e51b81526004018080602001828103825260288152602001806126406028913960400191505060405180910390fd5b811561153f5761153f61120c565b6000600c54431161155257600c54611554565b435b600a549091506115649087611c09565b600a556001600160a01b039485166000818152600f602090815260408083208054600160ff199091168117909155815160a0810183528581528084019b8c528083019687526060810185815261ffff9a8b166080830190815260088054948501815580885292517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3600590950294850180546001600160a01b03191691909e1617909c559b517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee483015595517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee582015599517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee68b015597517ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee7909901805461ffff1916999097169890981790955590549084526010909552505020600019919091019055565b6000546001600160a01b031690565b60006116e58284611d23565b9392505050565b60026001541415611744576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260018190555060006008848154811061175b57fe5b6000918252602080832087845260098252604080852033865290925292206005909102909101915061178c85610d4b565b8054156117d55760006117c18260010154610a9164e8d4a51000610a3f87600301548760000154611c6390919063ffffffff16565b905080156117d3576117d33382611d80565b505b831561180b576117e53384611eb8565b81546117fc906001600160a01b0316333087611f76565b80546118089085611c09565b81555b600382015481546118269164e8d4a5100091610a3f91611c63565b6001820155604080518581529051869133917f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a159181900360200190a3505060018055505050565b60096020908152600092835260408084209091529082529020805460019091015482565b60106020526000908152604090205481565b6003546001600160a01b031633146118ec5760405162461bcd60e51b81526004018080602001828103825260258152602001806125626025913960400191505060405180910390fd5b600380546001600160a01b0319166001600160a01b0392909216919091179055565b60115481565b600f6020526000908152604090205460ff1681565b611931611c05565b6001600160a01b03166119426116ca565b6001600160a01b03161461198b576040805162461bcd60e51b81526020600482018190526024820152600080516020612587833981519152604482015290519081900360640190fd5b6103e861ffff831611156119d05760405162461bcd60e51b81526004018080602001828103825260288152602001806124816028913960400191505060405180910390fd5b80156119de576119de61120c565b611a1b83611a15600887815481106119f257fe5b906000526020600020906005020160010154600a54611d2390919063ffffffff16565b90611c09565b600a819055508260088581548110611a2f57fe5b9060005260206000209060050201600101819055508160088581548110611a5257fe5b906000526020600020906005020160040160006101000a81548161ffff021916908361ffff16021790555050505050565b6003546001600160a01b031681565b60075481565b6005546001600160a01b03163314611ae15760405162461bcd60e51b81526004018080602001828103825260398152602001806124df6039913960400191505060405180910390fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b611b0b611c05565b6001600160a01b0316611b1c6116ca565b6001600160a01b031614611b65576040805162461bcd60e51b81526020600482018190526024820152600080516020612587833981519152604482015290519081900360640190fd5b6001600160a01b038116611baa5760405162461bcd60e51b81526004018080602001828103825260268152602001806124356026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b3390565b6000828201838110156116e5576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082611c7257506000610a9e565b82820282848281611c7f57fe5b04146116e55760405162461bcd60e51b81526004018080602001828103825260218152602001806125416021913960400191505060405180910390fd5b6000808211611d12576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611d1b57fe5b049392505050565b600082821115611d7a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000611d8b83610ab9565b90506001600160a01b03811615801590611db75750826001600160a01b0316816001600160a01b031614155b8015611dc557506000600b54115b15611e57576000611de7612710610a3f600b5486611c6390919063ffffffff16565b9050611df38282611fd6565b611e0684611e018584611d23565b611fd6565b816001600160a01b0316846001600160a01b03167f0a721ab4682ceb61c7e4d264ef879fc419a6d764b136e7d96ef54b2053c75673836040518082815260200191505060405180910390a350611e61565b611e618383611fd6565b505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052611e61908490612166565b6001600160a01b038281166000908152600d602052604090205416158015611ee857506001600160a01b03811615155b8015611f065750816001600160a01b0316816001600160a01b031614155b1561122b576001600160a01b038281166000818152600d6020908152604080832080546001600160a01b0319169587169586179055848352600e90915280822080546001019055517f9d05414fb79fac216c15606de5cc06664e91a254e4d5f57664d5f1beaf7fb7ef9190a35050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052611fd0908590612166565b50505050565b600254604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561202157600080fd5b505afa158015612035573d6000803e3d6000fd5b505050506040513d602081101561204b57600080fd5b50519050808211156120df576002546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018590529151919092169163a9059cbb9160448083019260209291908290030181600087803b1580156120ad57600080fd5b505af11580156120c1573d6000803e3d6000fd5b505050506040513d60208110156120d757600080fd5b50611e619050565b6002546040805163a9059cbb60e01b81526001600160a01b038681166004830152602482018690529151919092169163a9059cbb9160448083019260209291908290030181600087803b15801561213557600080fd5b505af1158015612149573d6000803e3d6000fd5b505050506040513d602081101561215f57600080fd5b5050505050565b60606121bb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166122179092919063ffffffff16565b805190915015611e61578080602001905160208110156121da57600080fd5b5051611e615760405162461bcd60e51b815260040180806020018281038252602a815260200180612668602a913960400191505060405180910390fd5b6060612226848460008561222e565b949350505050565b60608247101561226f5760405162461bcd60e51b815260040180806020018281038252602681526020018061245b6026913960400191505060405180910390fd5b6122788561238a565b6122c9576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106123085780518252601f1990920191602091820191016122e9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461236a576040519150601f19603f3d011682016040523d82523d6000602084013e61236f565b606091505b509150915061237f828286612390565b979650505050505050565b3b151590565b6060831561239f5750816116e5565b8251156123af5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156123f95781810151838201526020016123e1565b50505050905090810190601f1680156124265780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4661726d28736574293a20696e76616c696420657869742066656520626173697320706f696e74734661726d3a20576974686472617720616d6f756e74206973206c6172676572207468616e20617661696c61626c652062616c616e63654661726d3a204f6e6c792066656520636f6c6c6563746f722063616e206368616e67652066656520636f6c6c6563746f7220616464726573734661726d3a20456d697373696f6e207261746520696e20726564756374696f6e20696e74657276616c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774661726d3a204f6e6c79206465762063616e206368616e67652064657620616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65724661726d3a20456d697373696f6e20726174652063616e206f6e6c7920757064617465206166746572206d696e696e67207374617274734661726d3a20526566657272616c20626f6e7573206861732072656163686564206d61786d696d756d207468726573686f6c644661726d3a204f6e6c7920696e73757265722063616e206368616e676520696e737572616e636520616464726573734661726d28616464293a20696e76616c696420657869742066656520626173697320706f696e74735361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565644661726d3a20546f6b656e20646f6573206e6f742065786973747320696e20616e7920706f6f6ca264697066735822122047c3310910556a3aee1670050fd9b88dfe4e765d78e412882353657fb8e10f6364736f6c63430007030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1667,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1731,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "feed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(FeedToken)3521"
      },
      {
        "astId": 1733,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "devAddr",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1735,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "insAddr",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1737,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "feeAddr",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1739,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "feedPerBlock",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1741,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "reductionInterval",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1744,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "poolInfo",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(PoolInfo)1729_storage)dyn_storage"
      },
      {
        "astId": 1750,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "userInfo",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1718_storage))"
      },
      {
        "astId": 1753,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1756,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "refBonusBP",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1758,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "startBlock",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1768,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "referrers",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1772,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "referredCount",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1776,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "poolExistence",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_contract(IERC20)1124,t_bool)"
      },
      {
        "astId": 1780,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "poolIdForLpAddress",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_contract(IERC20)1124,t_uint256)"
      },
      {
        "astId": 1783,
        "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
        "label": "lastReductionBlock",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolInfo)1729_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)1729_storage",
        "encoding": "dynamic_array",
        "label": "struct FeedFarm.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(FeedToken)3521": {
        "encoding": "inplace",
        "label": "contract FeedToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1124": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(UserInfo)1718_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FeedFarm.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1718_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_contract(IERC20)1124,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1124",
        "label": "mapping(contract IERC20 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_contract(IERC20)1124,t_uint256)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)1124",
        "label": "mapping(contract IERC20 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1718_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct FeedFarm.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)1718_storage)"
      },
      "t_struct(PoolInfo)1729_storage": {
        "encoding": "inplace",
        "label": "struct FeedFarm.PoolInfo",
        "members": [
          {
            "astId": 1720,
            "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1124"
          },
          {
            "astId": 1722,
            "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1724,
            "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
            "label": "lastRewardBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1726,
            "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
            "label": "accFeedPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1728,
            "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
            "label": "exitFeeBP",
            "offset": 0,
            "slot": "4",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(UserInfo)1718_storage": {
        "encoding": "inplace",
        "label": "struct FeedFarm.UserInfo",
        "members": [
          {
            "astId": 1715,
            "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1717,
            "contract": "contracts/farm/FeedFarm.sol:FeedFarm",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}